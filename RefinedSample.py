from pydantic import BaseModel, computed_field
from Action import Action
from Target import Target
from Purity import Purity


class RefinedKrystalium(BaseModel):
    """
    Represents refined Krystalium, which are generated by combining two raw krystalium samples.

    When two samples are combined, one of the samples is places in the negative
    slot and the other in the positive slot. This will result in two sets of properties;

    The action of the negative is combined with the target of the positive and the target of the negative is combined
    with the action of the positive.
    """
    primary_action: Action
    primary_target: Target
    secondary_action: Action
    secondary_target: Target
    purity: Purity
    depleted: bool

    @computed_field(
        description="The numerical representation of the purity. Two indicates polluted, 12 indicates perfect")
    @property
    def purity_score(self) -> int:
        return Purity.getScore(self.purity)